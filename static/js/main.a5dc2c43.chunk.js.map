{"version":3,"sources":["LocationCapture/index.js","serviceWorker.js","Timeconverter.js","WeatherCards/WeatherCard/WeatherInfoWidget/index.js","WeatherCards/WeatherCard/index.js","WeatherCards/index.js","index.js"],"names":["LocationCapture","_this$props","this","props","onLocationSuccess","onError","navigator","geolocation","console","log","getCurrentPosition","coords","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","toString","React","Component","Boolean","window","location","hostname","match","Unix_timestamp","t","dt","Date","hr","getHours","m","getMinutes","s","getSeconds","substr","WeatherInfoWidget","react_default","a","createElement","className","text","concat","icon","value","WeatherCard","num","info","temperatureHigh","dn","time","slice","isNight","temp","toPrecision","data","cloudCover","humidity","pressure","uvIndex","area","map","index","WeatherCard_WeatherInfoWidget","key","sunriseTime","sunsetTime","WeatherCards","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isFetching","_this2","fetch","proxyUrl","latitude","longitude","then","res","json","setState","daily","timezone","_this3","_this$state","react_loader_spinner_default","type","color","Fragment","card","WeatherCards_WeatherCard","WeatherApp","_this$state$location","LocationCapture_LocationCapture","WeatherCards_WeatherCards","ReactDOM","render","src_WeatherApp","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5dc2c43.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default class LocationCapture  extends React.Component {\n\t\n\tcomponentDidMount(){\n\t\t\tconst {onLocationSuccess , onError} = this.props;\n\t\t\t\n\n\t\tif (navigator.geolocation) {\n\t\t\tconsole.log(\"jjnjnjhello\");\n\n\t\t\t//navigator.geolocation.getCurrentPosition(show);\n\n\t\t\tnavigator.geolocation.getCurrentPosition((coords) => { \n\t\t\t// onIsfetching(false)\n\t\t\tconsole.log(coords);\n\t\t\tonLocationSuccess(coords)\n\t        \n\t\t\t}, (error) => {\n\t\t\t\t\n\t\t\t\tconsole.log(\"hello world\");\n  \t\t\t\t\tswitch(error.code) {\n    \t\t\t\t\tcase error.PERMISSION_DENIED:\n      \t\t\t\t\t\tonError(\"User denied the request for Geolocation.\")\n      \t\t\t\t\t\tbreak;\n    \n    \t\t\t\t\tcase error.POSITION_UNAVAILABLE:\n      \t\t\t\t\t\tonError(\"Location information is unavailable.\")\n      \t\t\t\t\t\tbreak;\n   \n   \t\t\t\t\t\tcase error.TIMEOUT:\n      \t\t\t\t\t\tonError(\"The request to get user location timed out.\")\n      \t\t\t\t\t\tbreak;\n    \n    \t\t\t\t\tcase error.UNKNOWN_ERROR:\n      \t\t\t\t\t\tonError(\"An unknown error occurred.\")\n      \t\t\t\t\t\tbreak;\n      \t\t\t\t\n      \t\t\t\t\tdefault : \n      \t\t\t\t\t\tonError(error.toString())\n  \t\t\t\t\t}\n\t\t\t});\n    \t} \n    \telse {\n    \t    onError(\"Geolocation is not supported by this browser.\")\n    \t}\n\t}\n\trender(){\n\t\treturn null\n\t}\n} \n\n// function show(pos){\n// \tconsole.log(pos.latitude);\n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default function Unix_timestamp(t)\n{\nvar dt = new Date(t*1000);\nvar hr = dt.getHours();\nvar m = \"0\" + dt.getMinutes();\nvar s = \"0\" + dt.getSeconds();\nreturn hr+ ':' + m.substr(-2) + ':' + s.substr(-2);  \n}\n","import React from \"react\";\n\n\n\nconst WeatherInfoWidget = props => (\n    <div className=\"info-tile\">\n      <p className=\"info-text\">{props.text}</p>\n      <i className={`wi ${props.icon}`} />\n      <p>{props.value}</p>\n    </div>\n  );\n\nexport default WeatherInfoWidget;","import React from \"react\";\n//import Unix_timestamp from \"/Users/mayankkhanna/Desktop/weatherapp/src/Timeconverter.js\";\nimport Unix_timestamp from \"../../../src/Timeconverter.js\"\nimport WeatherInfoWidget from \"./WeatherInfoWidget\";\n\nconst WeatherCard = props => {\n    var num = ((props.info.temperatureHigh - 32) * 5) / 9;\n    var dn = Date();\n    var time = dn.slice(16, 18);\n    dn = dn.slice(0, 24);\n    const isNight = time >= 18 || time <= 5;\n    var temp = num.toPrecision(3);\n    var data = [\n      {\n        text: \"CLOUD COVER\",\n        icon: \"wi-cloudy\",\n        value: `${props.info.cloudCover}%`\n      },\n      {\n        text: \"HUMIDITY\",\n        icon: \"wi-raindrop\",\n        value: `${props.info.humidity}%`\n      },\n      {\n        text: \"PRESSURE\",\n        icon: \"wi-barometer\",\n        value: `${props.info.pressure}hPa`\n      },\n      {\n        text: \"UV INDEX\",\n        icon: \"wi-hot\",\n        value: `${props.info.uvIndex}`\n      }\n    ];\n  \n    return (\n      <div className={isNight ? \"card nighttime\" : \"card\"}>\n        <div className=\"outer-class\">\n          <div className=\"mainbox\">\n            <p> {props.area} </p>\n            <p> {dn} </p>\n            <p className=\"up\"> {props.info.icon} </p>\n          </div>\n  \n          <div className=\"temperature\">\n            <span className=\"thermo wi wi-thermometer\"> </span>\n            {temp}\n            {/* &#8451;  */}\n            <span className=\"wi wi-celsius\" />\n          </div>\n  \n          <div className=\"info\">\n            {data.map((data, index) => (\n              <WeatherInfoWidget\n                key={index}\n                text={data.text}\n                icon={data.icon}\n                value={data.value}\n              />\n            ))}\n          </div>\n  \n          <div className=\"icon-tray\">\n            <div\n              className={\n                isNight ? \"icon wi wi-night-clear\" : \"icon wi wi-day-sunny\"\n              }\n            />\n  \n            <div className=\"day-length\">\n              <div className=\"wrapper\">\n                <div className=\"weather-len\">\n                  {\" \"}\n                  <div className=\"fix wi wi-sunrise\" />\n                </div>{\" \"}\n                <span>{Unix_timestamp(props.info.sunriseTime)}</span>\n              </div>\n              <div className=\"wrapper\">\n                <div className=\"weather-len\">\n                  {\" \"}\n                  <div className=\"fix wi wi-moonrise\" />\n                </div>{\" \"}\n                <span>{Unix_timestamp(props.info.sunsetTime)}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \n  export default WeatherCard;","import React from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport WeatherCard from \"./WeatherCard\";\n\n\nexport default class WeatherCards extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        error: null,\n        isFetching: true,\n        location: null,\n        data: [],\n        area: null\n      };\n    }\n  \n    componentDidMount() {\n      const { location } = this.props;\n  \n      var proxyUrl  = \"https://cors-anywhere.herokuapp.com/\";\n      var targetUrl = \"https://api.darksky.net/forecast/df8dfdc94165fb4b059cbb51af0f1829/\";\n      fetch(\n        proxyUrl +\n          targetUrl +\n          location.coords.latitude +\n          \",\" +\n          location.coords.longitude\n      )\n        .then(res => res.json())\n        .then(data => {\n          this.setState({\n            isFetching: false,\n            data: data.daily.data.slice(0, 1),\n            area: data.timezone\n          });\n        });\n    }\n  \n    render() {\n      const { isFetching, error, data } = this.state;\n      if (isFetching) return <Loader type=\"ThreeDots\" color=\"#00BFFF\" />;\n      if (error) return error;\n  \n      return (\n        <>\n          {data.map((card, index) => (\n            <div key={index}>\n              <WeatherCard info={card} area={this.state.area} />\n            </div>\n          ))}\n        </>\n      );\n    }\n  }\n  ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Loader from \"react-loader-spinner\";\nimport \"./index.css\";\nimport LocationCapture from \"./LocationCapture\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport WeatherCards from \"./WeatherCards\";\n\n\n// ----- App ------\nclass WeatherApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isFetching: false,\n      location: {},\n      data: []\n    };\n  }\n\n  render() {\n    const { isFetching, error, location = {} } = this.state;\n    if (isFetching) return <Loader type=\"ThreeDots\" color=\"#00BFFF\" />;\n    if (error) return error;\n\n    return (\n      <>\n        <LocationCapture\n          onLocationSuccess={location => this.setState({ location })}\n          onError={error => this.setState({ error })}\n        />\n        {location.coords && <WeatherCards location={location} />}\n      </>\n    );\n  }\n}\n\nReactDOM.render(<WeatherApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}